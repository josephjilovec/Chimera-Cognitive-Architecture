
## Please note that this is a simplified version, you would need to add more for error handling, input validation, and security
    ## Set up w/ bash

mkdir language-learning-platform-backend
cd language-learning-platform-backend
npm init -y

  ##  Install dependencies

npm install express cors dotenv mongoose bcrypt jsonwebtoken

   ## main server file (index.js)

// index.js
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const mongoose = require('mongoose');

const app = express();
dotenv.config();
const PORT = process.env.PORT || 5000;

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useCreateIndex: true,
})
  .then(() => {
    console.log('Connected to MongoDB');
    app.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
    });
  })
  .catch((error) => {
    console.error('Error connecting to MongoDB:', error.message);
  });

// Middleware
app.use(cors());
app.use(express.json());

// Routes
const userRoutes = require('./routes/users');
const lessonRoutes = require('./routes/lessons');
const languageExchangeRoutes = require('./routes/languageExchange');
const vocabularyRoutes = require('./routes/vocabulary');
const communityRoutes = require('./routes/community');

app.use('/api/users', userRoutes);
app.use('/api/lessons', lessonRoutes);
app.use('/api/language-exchange', languageExchangeRoutes);
app.use('/api/vocabulary', vocabularyRoutes);
app.use('/api/community', communityRoutes);

// 404 Route
app.use((req, res) => {
  res.status(404).json({ message: 'Route not found' });
});


 ## "db.js" file to set up the database connection


// db.js
const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
const MONGO_URI = process.env.MONGO_URI;

mongoose.connect(MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useCreateIndex: true,
});

const db = mongoose.connection;

db.on('error', (err) => {
  console.error('MongoDB connection error:', err);
});

db.once('open', () => {
  console.log('Connected to MongoDB');
});

module.exports = db;


   ## "models" directory - define the schemas for Users, Lessons, LanguageExchange, Vocabulary, and Community


// models/User.js
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
    unique: true,
  },
  password: {
    type: String,
    required: true,
  },
});

userSchema.pre('save', async function (next) {
  try {
    if (!this.isModified('password')) {
      return next();
    }
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
  } catch (error) {
    next(error);
  }
});

userSchema.methods.comparePassword = async function (password) {
  try {
    return await bcrypt.compare(password, this.password);
  } catch (error) {
    throw new Error('Error comparing passwords');
  }
};

const User = mongoose.model('User', userSchema);
module.exports = User;

javascript

// models/Lesson.js
const mongoose = require('mongoose');

const lessonSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
  },
  content: {
    type: String,
  },
  language: {
    type: String,
    required: true,
  },
  // Add more fields as needed
});

const Lesson = mongoose.model('Lesson', lessonSchema);
module.exports = Lesson;

javascript

// models/LanguageExchange.js
const mongoose = require('mongoose');

const languageExchangeSchema = new mongoose.Schema({
  user1: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  user2: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  scheduledTime: {
    type: Date,
    required: true,
  },
  // Add more fields as needed
});

const LanguageExchange = mongoose.model('LanguageExchange', languageExchangeSchema);
module.exports = LanguageExchange;


// models/Vocabulary.js
const mongoose = require('mongoose');

const vocabularySchema = new mongoose.Schema({
  word: {
    type: String,
    required: true,
  },
  translation: {
    type: String,
    required: true,
  },
  language: {
    type: String,
    required: true,
  },
  // Add more fields as needed
});

const Vocabulary = mongoose.model('Vocabulary', vocabularySchema);
module.exports = Vocabulary;

javascript

// models/Community.js
const mongoose = require('mongoose');

const communitySchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User
